%h2#api-objects Objects

:markdown
  Every object has `created_at` and `updated_at` fields.

%h3#api-objects-type-annotations Type annotations

%dl
  %dt integer
  %dd The value should integer.
  %dt number
  %dd The value should be number; real number or integer.
  %dt string
  %dd The value should be a string.
  %dt boolean
  %dd The value should be a boolean.

%dl
  %dt array of $type
  %dd array of values which type is $type.

%dl
  %dt $<em>type</em>
  %dd Object of <em>type</em>.
  %dt $<em>type</em><code>s</code>
  %dd
    Sequence of objects of <em>type</em>.
    Usually contents of an array.
  %dt $base64Encoded
  %dd Base64 encoded string of a binary data.
  %dt $UUID-like-sequence
  %dd
    String which is expected to be unique in the world.
    It is UUID in the case the sequence is generated in server.
    If it is generated by iOS, it is not an exact UUID but an extended one by Apple.
  %dt $Time
  %dd ISO8601 format string of a time.

= render "api-account"
= render "api-table"
= render "api-customer-tag"
= render "api-cashier"
= render "api-payment-type"
= render "api-menu-item"

%h3#api-objects-customer Customer

:markdown
  A customer object associated with an account.
  This can be used to send/retrieve a customer information to/from an account.

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: integer
      %dd ID of the object.
      %dt account_id :: ("current"|integer)
      %dd Account id which this customer is associated with.
      %dt account_name :: string
      %dd Name of the account specified by `account_id`.  <em>ReadOnly</em>
      %dt fields_attributes [$field_attribute]
      %dd An array of customer field object.
      %dt guid
      %dd GUID.
  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            "id": 100,
            "account_id": 2,
            "account_name": "A Curry Rice Shop",
            "fields_attributes": $customer_fields,
            "guid": $UUID-like-sequence
          }

%h3#api-objects-customer-field Customer Field

:markdown
  A customer field belongs to a customer.
  This is mainly used to be included in a customer object.

.row
  .span8
    %h4 Fields

    %dl
      %dt customer_id :: integer
      %dd ID of customer which the field belongs to.
      %dt guid
      %dd GUID.
      %dt app_created_at
      %dd Time when the field has been created in a client app.  <em>WriteOnly</em>
      %dt name :: string
      %dd 
        Name of the field.  The value of this field is one of the followings:
        %dl
          %dt "customer.field.customerID"
          %dd key string representing customer id.
          %dt "customer.field.name"
          %dd key string representing customer's name.
          %dt "customer.field.ruby"
          %dd key string representing customer's ruby.
          %dt "customer.field.birthday"
          %dd key string representing customer's birthday.
          %dt "customer.field.sex"
          %dd key string representing customer's sex.
          %dt "customer.field.email"
          %dd key string representing customer's email address.
          %dt "customer.field.phone"
          %dd key string representing customer's phone number.
          %dt "customer.field.twitter"
          %dd key string representing customer's twitter id.
          %dt "customer.field.zip"
          %dd key string representing customer's zip code.
          %dt "customer.field.address1"
          %dd key string representing customer's address (1).
          %dt "customer.field.address2"
          %dd key string representing customer's address (2).
      %dt value :: string
      %dd Value of the field.
  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            "customer_id": 1,
            "guid": $UUID-like-sequence,
            "app_created_at": "2012-02-14T00:00:00Z",
            "name": "customer.field.name",
            "value": "Ubiregi Taro"
          }

%h3#api-objects-customer-note Customer Note

:markdown
  A customer note belongs to a customer.

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: integer
      %dd ID of this object.
      %dt customer_id :: integer (<em>required</em>)
      %dd ID which thie object belongs to.
      %dt app_created_at (<em>required</em> and <em>WriteOnly</em>)
      %dd Time when the note is created in a client app
      %dt guid (<em>required</em>)
      %dd GUID
      %dt checkout_id :: integer
      %dt kind (<em>ReadOnly</em>)
      %dt note :: string
      %dt photo
      %dt checkout_summary
  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            "id": 1,
            "customer_id": 1,
            "app_created_at": "2012-02-14T00:00:00Z",
            "guid": $UUID-like-sequence,
            "checkout_id": 2,
            "kind": 2,
            "note": "Memo Memo",
            "photo": $base64Encoded,
            "checkout_summary": "Summary"
          }


%h3#api-objects-friend Friend

:markdown
  Account summary information for chain branches.

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: integer
      %dd ID of account.
      %dt name :: string
      %dd Name of the account.
  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            id: 199,
            name: "hogehoge",
          }


%h3#api-objects-category Category

:markdown
  Categories are used to organize items in a menu. Categories can not be nested.

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: integer
      %dd ID of the object.
      %dt name :: string
      %dd Name of the category.
      %dt position
      %dd
        :markdown
          Position of the category in menu. `null` if the category is disabled.
  .span8
    %h4 Example
    %pre
      = preserve do
        :escaped
          {
            "id": 18,
            "name": "Soft Drink",
            "position": 4,
          }

%h3#api-objects-checkout Checkout

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: integer
      %dd ID of the object
      %dt guid
      %dd
        UUID of checkout.
        The ID is generated by clients, thus it may not be unique.
        This is used to prevent a checkout posted from being inserted more than one time.
        The pair of <code>guid</code> and <code>paid_at</code> is used to identify a checkout.
      %dt account_id :: ("current"|integer)
      %dd ID of account which the checkout is belonging to.
      %dt price :: real
      %dd Server culculated total sales of the checkout.
      %dt change :: boolean
      %dd Change given to the customer.
      %dt status :: integer
      %dd Either 1(Close), 2(Open), 3(Delete), or 4(Cancel).
      %dt cashier_id :: integer
      %dd ID of the cashier who processed the checkout. May be <code>null</code> if input skipped.
      %dt customers_count :: integer
      %dd
        Number of customers associated with the checkout.
        Zero in the case ommited.
      %dt payments
      %dd Array of CheckoutPayment, which describes how the checkout is got paid.
      %dt items
      %dd Array of CheckoutItem, which describes which items are sold.
      %dt table_ids
      %dd Array of ID of Table.
      %dt customer_tag_ids
      %dd Array of ID of CustomerTags.
      %dt modifier (obsolete)
      %dd Only for compatibility.

  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            "id": 1,
            "guid": $UUID-like-sequence,
            "account_id": 1,
            "paid_at": "2011-12-24T16:20:20Z",
            "price": "385.0",
            "change": "4000.0",
            "status": 4,
            "cashier_id": null,
            "customers_count": 0,
            "payments": [ $Payments ],
            "items": [ $CheckoutItems ],
            "table_ids": [ $TableIDs ],
            "customer_tag_ids": [ $CustomerTagIDs ],
            "modifier": "0.0"
          }

%h4 Notes

%p
  Fields which represents currency is represented as a string in JSON.
  This is to avoid inacculate float representation.
  Decimal types; like NSDecimalNumber (Objective-C) and BigDecimal(Ruby and Java); should be used for currency.

%p
  Change is assumed to be by cash.

%h3#api-objects-payment Payment

%p
  Pair of amount the customer paid, and method the payment maid with.

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: integer
      %dd ID of the object
      %dt payment_type_id :: integer
      %dd ID of payment_type
      %dt amount :: real
      %dd Amount the customer paid

  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            "id": 1,
            "payment_type_id": 1,
            "amount": "5000.0"
          }

%h3#api-objects-checkout-item CheckoutItem

%p

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: integer
      %dd ID of the object
      %dt menu_item_id :: integer
      %dd ID of the menu item
      %dt count
      %dd 
        The number of the items the customer bought.
        May be negative to express a return.
      %dt sales :: real
      %dd Sales amount without TAX.
      %dt tax :: real
      %dd TAX for the item.
      %dt discount_sales :: real
      %dd Sales discounted
      %dt discount_tax :: real
      %dd TAX discounted

  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            "id": 1,
            "menu_item_id": 1,
            "count": 3,
            "sales": "330.0",
            "tax": "0.0",
            "discount_sales": "0.0",
            "discount_tax": "0.0"
          }

%h4 Notes

:markdown
  The price is culculated as follows: `sales` + `tax` - (`discount_sales` + `discount_tax`).

%h3#api-objects-stock-event Stock Event

:markdown
  Event object related to stock control.
  The object is used to tell someone that stock-related event has occured.
  Type of a stock event is either "inventory", "arrival", "shipping", or "order".

.row
  .span8
    %h4 Fields

    %dl
      %dt id :: int
      %dd ID of the event.
      %dt menu_item_id :: int
      %dd ID of the menu item associated with the event.
      %dt app_created_at
      %dd Time when the event has been created in a client app.  <em>WriteOnly</em>
      %dt inventory_at
      %dd Time when the inentory event has occured.  It maybe different from app_created_at.
      %dt event_type :: string
      %dd Type of the event (either "inventory", "arrival", "shipping", or "order").
      %dt amount :: real
      %dd 
        Amount related to the event.  <em>Note that the meaning of the value of this attribute depends on `event_type`</em>.
        Assume that the value of amount is 55.  The meaning of this value depends on the value of `event_type` as followings:
        %ul
          %li "inventory" : The number of inventory specified by `menu_item_id` is 55.
          %li "arrival" :  55 items specified by `menu_item_id` has arrived.
          %li "shipping" : 55 items specified by `menu_item_id` has shipped.
          %li "order" : 55 items specified by `menu_item_id` has been ordered.
      %dt uuid
      %dd UUID associated to the event.  This is used to prevent duplicated posts.
      %dt body
      %dd An arbitrary JSON object.  The usage of the value is not decided yet.
  .span8
    %h4 Example

    %pre
      = preserve do
        :escaped
          {
            "id" : 1,
            "menu_item_id" : 2,
            "app_created_at" : "2012-02-14T00:00:00Z",
            "inventory__at" : "2012-02-14T01:00:00Z",
            "event_type" : "arrival",
            "amount" : 55,
            "uuid" : $UUID,
            "body" : { "note" : "This object represents that 55 items specified by `menu_item_id` has arrived" },
          }
