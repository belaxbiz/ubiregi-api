%h2#api-resources Resources

%h3#api-resources-accounts /accounts

%p
  User accounts. Readonly.

%h4 GET on /accounts/<em>:account_id</em>, /accounts/current


%h3#api-resources-cashiers /accounts/<em>:account_id</em>/cashiers

:markdown
  Collection of cashiers defined in the user's account.


%h3#api-resources-customer_tags /accounts/<em>:account_id</em>/customer_tags

:markdown
  Collection of customer tags defined in the account.


%h3#api-resources-tables /accounts/:account_id/tables

:markdown
  Collection of tables defined in the account.

  Tables objects are to be obsolete, and there are no update operations for `/tables`.

%h4 GET on /accounts/:account_id/tables for indexing

%h3#api-resources-menu-items /menus/:menu_id/items

:markdown
  Collection of items in menu specified by `:menu_id`.

%h3#api-resources-menu-categories /menus/:menu_id/categories

:markdown
  Collection of categories in menu specified by `menu_id`.

%h4 GET on /menus/:menu_id/categories
%h4 POST on /menus/:menu_id/categories

.row
  .span8
    %h5 Request
    %pre
      = preserve do
        :escaped
          {
            "categories": [
              {
                "name":"New Category",
                "position":4,
              },
              {
                "id": 1,
                "name": "Renamed Category",
                "position":4,
              }
            ]
          }
  .span8
    %h5 Fields

    %dl
      %dt id :: integer
      %dd
        ID of category object.
        If unspecified, create a new category object.
        If specified, update an existing category object.
      %dt name
      %dd
        name of category object.
      %dt position

.row
  .span8
    %h5 Response
    %pre
      = preserve do
        :escaped
          {
            "timestamp": "2011-11-02T09:11:12Z",
            "categories" : $categories
          }
  .span8
    %p
      The order of the category objects are preserved.

    %p
      The update/creation is transactional.
      There are only two cases; everything processed successfully, or nothing changed since an error found.

%h3#api-resources-checkouts /accounts/:account_id/checkouts

:markdown
  Collection of checkouts of the account.

%h4 GET on /accounts/:account_id/checkouts

%h5 Response
.row
  .span8
    %pre
      = preserve do
        :escaped
          {
            "timestamp": "2011-11-02T09:11:34Z",
            "next-url": $URL,
            "last_updated_at": "2011-12-31T00:00:31Z",
            "checkouts": $checkouts,
          }
  .span8
    :markdown
      The response follows the convention of index action.

    %h5 Fields

    %dl
      %dt checkouts
      %dd Checkouts.

%h4 POST on /accounts/:account_id/checkouts

%h5 Request
.row
  .span8
    %pre
      = preserve do
        :escaped
          {
            "checkouts": [
              {
                "items_attributes": [
                  {
                    "menu_item_id": 123,
                    "count": 1,
                    "sales": "100",
                    "tax": "5",
                    "discount_sales": "20",
                    "discount_tax": "1"
                  }
                ],
                "change" : "26",
                "guid" : $UUID-like-sequence,
                "paid_at": $Time,
                "payments_attributes": [
                  { "payment_type_id": 101, "amount": "100" }
                ],
                "customers_count': 1,
                "customer_taggings_attributes': [
                  { "customer_tag_id": 20 }
                ],
                "cashier_id": 948,
                "status": 1,
              },
              {
                "id": 4739,
                "status": 4,
              }
            ]
          }
  .span8
    :markdown
      Request is to create/update checkouts.
      The dictionaries of attributes of checkouts will be applied to the database.

    :markdown
      If the dictionary does not contains `id` field, it creates new checkout.
      If the dictionary contains `id` field, it updates the checkout specified with the ID.

    :markdown
      Only updating `deleted` field to `true` is accepted update.
      Other fields will be ignored.
      Other update to `deleted` field, setting to `false` or other, will result an error.

    %h5 Fields

    %dl
      %dt items_attributes
      %dd
        The attributes of checkout items.
        It is same with in the definition of objects, but without `id`.
      %dt payments_attributes
      %dd
        The attributes of checkout payments, but without `id`.
      %dt customer_taggings_attributes
      %dd
        Hashes only contains <code>customer_tag_id</code> fields, which specifies ID of the tags given to the checkout.
      %dt id :: integer
      %dd
        If you want to update an existing checkout, specify ID of the checkout.

%h5 Response
.row
  .span8
    %pre
      = preserve do
        :escaped

          {
            "timestamp": "2011-11-02T09:11:34Z",
            "next-url": $URL,
            "last_updated_at": "2011-12-31T00:00:31Z",
            "checkouts": $checkouts,
          }
  .span8
    :markdown
      The response is same with index action, but containes only created/updated checkouts.
      The `next-url` and `timestamp` fields should be ignored.

%h3#api-resources-customers /customers

:markdown
  Collection of customers available for the account.

%h4 GET on /customers

:markdown

  Retrieve collection of all customers available for the account.

%h4 POST on /customers

:markdown

  Create/Update information of new customers available for the account.

.row
  .span8
    %h5 Request
    %pre
      = preserve do
        :escaped
          {
            "customers": [
              {
                "account_id": 1, 
                "guid": $UUID-like-sequence,
                "deleted": false,
                "fields_attributes": [
                  "customer_id": 10,
                  "guid": "2012-02-15-abcdefg",
                  "app_created_at": "2012-02-14T00:00Z",
                  "deleted": false,
                  "name": "customer.field.name",
                  "value": "SPJ"
                ]
              }
            ]
          }
  .span8
    %h5 Fields

    %dl
      %dt account_id :: ("current"|integer)
      %dt guid
      %dt deleted :: boolean
      %dt fields_attributes
      %dd Array of customer field

.row
  .span8
    %h5 Response
    %pre
      = preserve do
        :escaped
          {
            "timestamp": "2012-02-14T09:00:00Z",
            "customers" : $customers
          }
  .span8
    %p
      The order of the customer objects are preserved.

    %p
      The update/creation is transactional.
      There are only two cases; everything processed successfully, or nothing changed since an error found.

%h3#api-resources-customer-notes /customers/notes

:markdown
  Collection of customer notes associated with `/customers`.

%h4 GET on /customers/notes

:markdown
  Retrieve collection of customer notes of all customers available for the account.

%h4 POST on /customers/notes

:markdown
  Create/Update customer notes specified by `:customer_id` for the account.

.row
  .span8
    %h5 Request
    %pre
      = preserve do
        :escaped
          {
            "notes": [
              {
                "id": 1,
                "customer_id": 1, 
                "guid": $UUID-like-sequence,
                "app_created_at": "2012-02-17T00:00Z",
                "checkout_id": 2,
                "note": "Memo Memo"
              }
            ]
          }
    %h5 Fields
    %dl
      %dt id :: integer
      %dd ID of this object.
      %dt customer_id :: integer (<em>required</em>)
      %dd ID which thie object belongs to.
      %dd app_created_at (<em>required</em> and <em>WriteOnly</em>)
      %dt Time when the note is created in a client app
      %dt guid (<em>required</em>)
      %dd GUID
      %dt checkout_id
      %dt kind (<em>ReadOnly</em>)
      %dt note :: string
      %dt photo
      %dt checkout_summary (<em>ReadOnly</em>)

.row
  .span8
    %h5 Response
    %pre
      = preserve do
        :escaped
          {
            "timestamp": "2012-02-17T00:10:00Z",
            "notes" : $notes
          }
  .span8
    %p
      The order of the customer note objects are preserved.

    %p
      The update/creation is transactional.
      There are only two cases; everything processed successfully, or nothing changed since an error found.


%h3#api-resources-stock-events /accounts/:account_id/stocks/events

:markdown
  Collection of stocking events of the account.

%h4 GET on /accounts/:account_id/stocks/events
:markdown
  Get all stock events associated with the account specified by `:account_id`.

%h4 POST on /accounts/:account_id/stocks/events

:markdown
  Send new stock events to the account specified by `:account_id`.

.row
  .span8
    %h5 Request
    %pre
      = preserve do
        :escaped
          {
            "events": [
              {
                "menu_item_id": 2,
                "app_created_at" : "2012-02-14T00:00:00Z",
                "inventory_at" : "2012-02-14T01:00:00Z",
                "event_type" : "arrival",
                "amount" : 55,
                "uuid" : $UUID,
                "body" : { "memo" : "Memo Memo" },
              }
            ]
          }
  .span8
    %h5 Fields

    %dl
      %dt menu_item_id :: integer
      %dt app_created_at (<em>WriteOnly</em>)
      %dt inventory_at
      %dt event_type :: string
      %dd Either "inventory",  "arrival", "shipping", or "order" can be specified.
      %dt amount :: real
      %dt uuid
      %dt body
      %dd arbitrary JSON object.

.row
  .span8
    %h5 Response
    %pre
      = preserve do
        :escaped
          {
            "timestamp": "2012-02-14T09:00:00Z",
            "events" : $events
          }
  .span8
    %p
      The order of the event objects are preserved.

    %p
      The update/creation is transactional.
      There are only two cases; everything processed successfully, or nothing changed since an error found.

