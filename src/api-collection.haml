%h1#collection-api-set Standard Set of APIs on Collections

%p
  Most resource collections provides the following set of APIs.

%ul
  %li Retrieving the collection (Index)
  %li Creating or updating items (POST)
  %li <span class="label success">Optional</span> Retrieving one item (GET)

%h2 Standard Index Parameters

%p
  Indexing actions take a set of parameters; <code>since</code>, <code>until</code>, and <code>glb</code>.
  They are used to limit the size of the result sets.

%table
  %tr
    %th <code>since</code>
    %td Limits the result set to contain only updated items since the parameter.
  %tr
    %th <code>until</code>
    %td Limits the result set to reject items updated since the parameter.
  %tr
    %th <code>glb</code>
    %td Greatest lower bound of id of the result set. This is used to retrieve next batch of the collection.

%p The result set can be described as follows:

%blockquote { item | since ≤ item.updated_at ⋀ item.updated_at < until ⋀ glb < item.id }

%p The items are sorted by their <code>id</code>s.

%p The result will be on following pattern.

%pre
  = preserve do
    :escaped
      {
        "timestamp": timestamp,
        "next-url": url,
        "last_updated_at": timestamp,
        rows: [ objects ],
      }

%dl
  %dt timestamp
  %dd
    :markdown
      The server time.
      This is sent for the case client local clock is incorrect.
      If `until` parameter is specified, `timestamp` will be the requested `until`.
  %dt next-url
  %dd
    The URL to retrieve next result set.
    This will be unspecified in the case there are no more results.
  %dt last_updated_at
  %dd
    The timestamp on the time, there were last update of an object which belongs to the resource you requested.
  %dt $rows
  %dd
    :markdown
      Array of objects.
      The name will be different, `items` for MenuItems, `categories` for Categories, and `checkouts` for Checkouts.

%h2 Fetching Whole Collection

:markdown
  There are limitation on the number of objects contained in one request; this is the reason we accept `glb` parameter.
  You might have a question that how to get the whole collection?
  A set of requests to fetch collections can be interleaved by requests which updates objects which is contained in the collection.
  In that case, the `updated_at` field will be updated and because of the `until` parameter included in the fetch request, the updated objects can not be fetched.

:markdown
  `last-updated-at` field is to handle such case.
  If there are no `next-url` field sent, which means there are no more object for the parameters you specified, check if the `timestamp` field is newer than `last-updated-at`.

:markdown
  1. Send a request without `until` and `glb` parameters.
  2. Check if the response contains `next-url` field.
  3. If contains, fetch the `next-url` and go step 2 again.
  4. If not contains, send a request again but with `since` = `timestamp`, and go step 2 again.

%h2 POST Convention

%p
  POST actions to collection create or update more than one items.
  This helps to make updating many items faster.

%p
  The request will be like the following:

%pre
  = preserve do
    :escaped
      [
        { "name": "new object", ... },
        { "name": "another new object", ...},
        { "id": 123, "name": "object to be updated" },
      ]

:markdown
  * If there are no `id` field in an object, it will create new item.
  * If there are `id` field in an object, it will update an existing item.

:markdown
  The post action is transactional.
  If there are an error processing an item, all creation or update of items will be canceled.
  There will be one of *everything ok* or *nothing changed*.

:markdown
  There is no limitation on number of objects in one request, but you should take care of it.
  100 items in a request will be ok. 10,000 items in a request should cause a problem.
  We will ask you to stop posting too big request, if there are some problem.

