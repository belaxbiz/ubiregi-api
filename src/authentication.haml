%h1#authentication Authentication

%p
  Currently we provide very simple token based authentication mechanism.
  Every installations of client have their own secret tokens which can be used for API access.

%h2#authentication-registration App Registration

%p
  Before starting developing with Ubiregi API, you need to register your app on ubiregi.com
  Visit #{link_to "Ubiregi for Developers", "https://ubiregi.com/developer"}, and fill the form (You must have an Ubiregi account).

<img src="images/registration.png" width="90%">

%p
  After registration, your app will have <em>Install URL</em> and <em>Secret</em>.
  Install URL is the URL to tell your users to install your app.
  Secret is a random string which identifies access from your app.
  You <em>should</em> keep the value secret, since it can be used to block bad apps.

%h2#authentication-installation Installation

%p
  A user will <it>install</it> apps to ubiregi.com.
  Installations generate new secret tokens.
  The user have to notify an app its secret token, and the app will be authenticated with the token.

%ul
  %li User need to <it>install</it> an app to use it
  %li Each installation have their own secret token
  %li
    There are no automated way to notify app its secret token
    %br
    (We are planning to provide standardized mechanisms such as OAuth.)

%p
  User may <it>uninstall</it> an app.
  Un-installation of an app will invalidate the secret token.
  After your app got uninstalled by the user, your app can not access the user's data.

%p
  The secret token is installation specific.
  If your user uninstall your application, the token will be invalidated.
  After your user re-install your application, new token will be generated.

%p
  To install your app, visit your app's install URL.

<img src="images/app_installation.png" width="90%">

%p
  You can install/uninstall the app to your account.
  Visit #{ link_to "https://ubiregi.com/installs" } to list all applications you have installed.

%h2#authentication-authorization Authorization

%p
  There is only one authorizatioin levels, <strong>everything</strong>.
  If a user allows an app to access its data (installs the app), the app can access everything.

%h2#authentication-the-protocol The Protocol

%p
  Give HTTP the following two request headers on all requests.

%table
  %tr
    %th{ :width => "190" } <code>X-Ubiregi-Auth-Token</code>
    %td
      The authentication token of the user for your app installation.
      This is used for authentication.
  %tr
    %th <code>X-Ubiregi-App-Secret</code>
    %td
      %div
        Hash of your app's secret.
        This is used to identify which app send the access, and can be used to block the app.
        You are responsible to keep it secret.
      %div
        Given your app's <em>secret</em> and your generated <em>salt</em>, compute
      %blockquote
        <em>salt</em><code>:</code><em>h(salt . secret)</em>
      %div
        where, <em>h</em> is SHA1 hashing function, and <em>.</em> is concatination of two strings.

%p
  If <code>X-Ubiregi-Auth-Token</code> or <code>X-Ubiregi-App-Secret</code> is invalid, your request will result in <code>401</code> (Unauthorized) status.

%p
  Note that there are another possibility to make your request failed.
  <code>402</code> (Payment required) may be returned in the case the user's subscription got expired.
  After the user renew the subscription, the status will be recovered.

%p
  Check the #{ link_to 'examples', '#introduction-examples' } to see how the authentication is exactly.

%h3 Example of Computation of X-Ubiregi-App-Secret in Ruby

%pre
  = preserve do
    :escaped
      secret = "topsecret"
      salt = Time.now.strftime("%Y%m%d%H%M%S")        # Assume "20120101032111"
      digest = Digest::SHA1.hexdigest(salt + secret)  # "4fec3a3e9dfb1b3ea7d7ba9cfd067286a1f23a03"
      
      app_secret = salt + ":" + digest                # "20120101032111:4fec3a3e9dfb1b3ea7d7ba9cfd067286a1f23a03"

%h3 Example of Computation of X-Ubiregi-App-Secret in Scala

%pre
  = preserve do
    :escaped

      def encode_secret(secret: String): String = {
        def generateSalt(): String = {
          val random = SecureRandom.getInstance('SHA1PRNG');
          random.setSeed(System.currentTimeMillis())
          '%08x'.format(random.nextInt())
        }
        val salt = generateSalt()
        val hexDigest = sha1HexDigest(salt + secret)
        (salt + ":" + hexDigest)
      }
      def sha1HexDigest(from: String): String = {
        val sha1 = MessageDigest.getInstance('SHA')
        sha1.reset()
        sha1.update(from.getBytes('UTF-8'))
        sha1.digest().map{n => '%02x'.format(n & 0xff)}.mkString
      }
      val secret = "topsecret"
      val appSecret = encode_secret(secret)
