%h1#object-checkout Checkout

:markdown
  `Checkout` object represents an checkout/bill.

%h2#object-checkout-fields Fields

.row
  .span6
    %dl
      %dt= field "id", :readonly
      %dd ID of the object
      %dt= field "guid"
      %dd
        UUID of checkout.
        The ID is generated by clients, thus it may not be unique.
        This is used to prevent a checkout posted from being inserted more than one time.
        The tuple of <code>guid</code>, <code>paid_at</code>, and <code>account_id</code> is used to identify a checkout.
      %dt= field "account_id"
      %dd ID of account which the checkout is belonging to.
      %dt= field "price", :readonly
      %dd <strong>A string</strong> which represents server's culculated total sales of the checkout.
      %dt= field "change"
      %dd <strong>A string</strong> which represents change given to the customer.
      %dt= field "status"
      %dd 
        The status of the checkout.
        One of <code>"close"</code>, <code>"open"</code>, <code>"deleted"</code>, or <code>"cancel"</code>.
        <code>"close"</code> is for closed checkout, such that the cashier already finished editing the checkout.
        <code>"open"</code> is for open checkout, such that the cashier is continuing editing the checkout.
        <code>"deleted"</code> is for deleted checkout, such that the checkout once was closed, but later deleted.
        <code>"cancel"</code> is for canceled checkout, such that the checkout was canceled without closing it.
      %dt= field "cashier_id"
      %dd ID of the cashier who processed the checkout. May be <code>null</code> if input skipped.
      %dt= field "customers_count"
      %dd
        Number of customers associated with the checkout.
        Zero in the case ommited.
      %dt= field "payments"
      %dd Array of <code>CheckoutPayment</code>, which describes how the checkout is got paid.
      %dt= field "items"
      %dd Array of <code>CheckoutItem</code>, which describes which items are sold.
      %dt= field "table_ids"
      %dd Array of ID of <code>Table</code>.
      %dt= field "customer_tag_ids"
      %dd Array of ID of <code>CustomerTags</code>.
      %dt= field "modifier", :readonly, :optional
      %dd Only for compatibility.

  .span6
    %pre
      = preserve do
        :escaped
          {
            "id": 1,
            "guid": "8928309238-d987aerkeh-9847tdfkzhg4",
            "account_id": 1,
            "paid_at": "2011-12-24T16:20:20Z",
            "price": "385.0",
            "change": "4000.0",
            "status": "close",
            "cashier_id": null,
            "customers_count": 0,
            "payments": [ $Payments ],
            "items": [ $CheckoutItems ],
            "table_ids": [ 99, 8 ],
            "customer_tag_ids": [ 10, 1003 ],
            "modifier": "0.0"
          }

%h2#get-on-accounts-account-id-checkouts GET on /accounts/<em>account_id</em>/checkouts

:markdown
  Retrieves the checkouts of the account which specified with *account_id*.
  The account should be one of current account, parent, children, or siblings.
  In other case, the request will result in `404` not found.

%h3 Request

.row
  .span6
    %pre
      = preserve do
        :escaped
          GET /accounts/current/checkouts
          GET /accounts/113/checkouts?since=....
  .span6
    %dl
      %dt= field "since"
      %dt= field "until"
      %dt= field "glb"

%h3 Response
.row
  .span6
    %pre
      = preserve do
        :escaped
          {
            "timestamp": "2011-11-02T09:11:34Z",
            "next-url": "https://ubiregi.com/api/3/accounts/31/checkouts?since=.....",
            "last_updated_at": "2011-12-31T00:00:31Z",
            "checkouts": [ $checkouts ],
          }
  .span6
    %dl
      %dt= field "timestamp"
      %dt= field "next-url"
      %dt= field "last_updated_at"
      %dt= field "checkouts"
      %dd Array of <code>Checkout</code>s for the request.

%h2#post-on-accounts-account-id-checkouts POST on /accounts/<em>account_id</em>/checkouts

:markdown
  Create/update checkout of account with `account_id`.
  
  Checkouts of current account and its child accounts are writable.
  Otherwise, the post request to checkouts will result in `400` error.
  

%h3 Request

.row
  .span6
    %pre
      = preserve do
        :escaped
          {
            "checkouts": [
              {
                "items": [
                  {
                    "menu_item_id": 123,
                    "count": 1,
                    "sales": "100",
                    "tax": "5",
                    "discount_sales": "20",
                    "discount_tax": "1"
                  }
                ],
                "change" : "26",
                "guid" : $UUID-like-sequence,
                "paid_at": $Time,
                "payments": [
                  { "payment_type_id": 101, "amount": "100" }
                ],
                "customers_count': 1,
                "customer_tag_ids': [ 20 ],
                "cashier_id": 948,
                "status": "Open",
              },
              {
                "id": 4739,
                "status": "Close",
              }
            ]
          }
  .span6
    %dl
      %dt= field "checkouts"
      %dd
        <code>Checkout</code> objects to be created/updated.
        %dl
          %dt= field "id"
          %dt= field "guid"
          %dt= field "change"
          %dt= field "status"
          %dt= field "cashier_id"
          %dt= field "customers_count"
          %dt= field "payments"
          %dd Array of <code>CheckoutPayment</code>s.
          %dt= field "items"
          %dd Array of <code>CheckoutItem</code>s.
          %dt= field "table_ids"
          %dd
            Array of IDs of <code>Table</code>s.
          %dt= field "customer_tag_ids"
          %dd
            Array of IDs of <code>CustomerTag</code>s.
            
    :markdown
      There are validations on creating checkout objects.
      It should be good practice to send all attributes when creating new checkout.

%h4 Updating items and payments

.row
  .span6
    %pre
      = preserve do
        :escaped
          {
            "checkouts": [
              {
                "id": 123
                "payments": [
                  {
                    "payment_type_id": 13,
                    "amount": "1032",
                  },
                  {
                    "id": 3112,
                    "amount": "809",
                  },
                ],
                "items": []
              },
            ]
          }
  .span6
    %h5 Creating an Object
    :markdown
      Include an object without `id`.
      The first `payments` object is creating an `CheckoutPayment`.
      
    %h5 Updating an Object
    :markdown
      Include an object with `id` and updating attributes.
      The second `payments` object is updating `amount` of a `CheckoutPayment` with its ID is 3112.
  
    %h5 Deleting an Object
    :markdown
      Objects which is not included in the array are deleted.
      All objects in `items` will be deleted.
      
%h3 Response
.row
  .span6
    %pre
      = preserve do
        :escaped

          {
            "timestamp": "2011-11-02T09:11:34Z",
            "checkouts": [ $checkouts ],
          }
  .span6
    %dl
      %dt= field "timestamp"
      %dt= field "checkouts"