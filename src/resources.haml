%script{ :src => "jquery.js" }
%script{ :src => "bootstrap-tabs.js" }

%ul.tabs{ :data => { :tabs => "tabs" } }
  %li.active= link_to("General Notes", "#general-notes")
  %li= link_to "Objects", "#objects"
  %li= link_to "Resources", "#resources"

.tab-content
  .active.tab-pane#general-notes

    %h2 Meta variables

    %dl
      %dt $<em>type</em>
      %dd Object of <em>type</em>.
      %dt $<em>type</em><code>s</code>
      %dd
        Sequence of objects of <em>type</em>.
        Usually contents of an array.
      %dt $base64Encoded
      %dd Base64 encoded string of a binary data.
      %dt $UUID-like-sequence
      %dd
        String which is expected to be unique in the world.
        It is UUID in the case the sequence is generated in server.
        If it is generated by iOS, it is not an exact UUID but an extended one by Apple.
      %dt $Time
      %dd ISO8601 format string of a time.

    %h2 Standard Set of APIs on Collection

    %p
      Most resource collections provides the following set of APIs.

    %ul
      %li Retrieving the collection (Index)
      %li Creating or updating items (POST)
      %li <strong>Optional</strong>: Retrieving one item (GET)
    
    %h2 Standard Index Parameters
    
    %p
      Indexing actions take a set of parameters; <code>since</code>, <code>until</code>, and <code>glb</code>.
      They are used to limit the size of the result sets.

    %table
      %tr
        %th <code>since</code>
        %td Limits the result set to contain only updated items since the parameter.
      %tr
        %th <code>until</code>
        %td Limits the result set to reject items updated since the parameter.
      %tr
        %th <code>glb</code>
        %td Greatest lower bound of id of the result set. This is used to retrieve next batch of the collection.
    
    %p The result set can be described as follows:

    %blockquote { item | since ≤ item.updated_at ⋀ item.updated_at < until ⋀ glb < item.id }

    %p The items are sorted by their <code>id</code>s.

    %p The result will be on following pattern.

    %pre
      = preserve do
        :escaped
          {
            "timestamp": $Timestamp,
            "next-url": $URL,
            "last-updated-at": $Timestamp,
            $rows: [ $objects ],
          }

    %dl
      %dt timestamp
      %dd
        :markdown
          The server time.
          This is sent for the case client local clock is incorrect.
          If `until` parameter is specified, `timestamp` will be the requested `until`.
      %dt next-url (optional)
      %dd
        The URL to retrieve next result set.
        This will be unspecified in the case there are no more results.
      %dt last-updated-at
      %dd
        The timestamp on the time, there were last update of an object which belongs to the resource you requested.
      %dt $rows
      %dd
        :markdown
          Array of objects.
          The name will be different, `items` for MenuItems, `categories` for Categories, and `checkouts` for Checkouts.

    %h3 Fetching Whole Collection

    :markdown
      There are limitation on the number of objects contained in one request; this is the reason we accept `glb` parameter.
      You might have a question that how to get the whole collection?
      A set of requests to fetch collections can be interleaved by requests which updates objects which is contained in the collection.
      In that case, the `updated_at` field will be updated and because of the `until` parameter included in the fetch request, the updated objects can not be fetched.

    :markdown
      `last-updated-at` field is to handle such case.
      If there are no `next-url` field sent, which means there are no more object for the parameters you specified, check if the `timestamp` field is newer than `last-updated-at`.

    :markdown
      1. Send a request without `until` and `glb` parameters.
      2. Check if the response contains `next-url` field.
      3. If contains, fetch the `next-url` and go step 2 again.
      4. If not caintains, send a request again but with `since` = `timestamp`, and got step 2 again.

    %h2 POST Convention

    %p
      POST actions to collection create or update more than one items.
      This helps to make updating many items faster.

    %p
      The request will be like the following:

    %pre
      = preserve do
        :escaped
          [
            { "name": "new object", ... },
            { "name": "another new object", ...},
            { "id": 123, "name": "object to be updated" },
          ]
    
    :markdown
      * If there are no `id` field in an object, it will create new item.
      * If there are `id` field in an object, it will update an existing item.

    :markdown
      The post action is transactional.
      If there are an error processing an item, all creation or update of items will be canceled.
      There will be one of *everything ok* or *nothing changed*.

    :markdown
      There is no limitation on number of objects in one request, but you should take care of it.
      100 items in a request will be ok. 10,000 items in a request should cause a problem.
      We will ask you to stop posting too big request, if there are some problem.

      
  .tab-pane#objects
    :markdown
      Every object has `created_at` and `updated_at` fields.

    %h2 Account

    .row
      .span8
        %h3 Fields

        %dl
          %dt id
          %dd Account ID.
          %dt login (optional)
          %dd Account's login
          %dt email (optional)
          %dd Account's email
          %dt name
          %dd Account name to be displayed to users.
          %dt expire_at (optional)
          %dd
            Expiration data.
            May be `null` in the case there is no expiration on subscription.
          %dt subscription
          %dd One of `trial`, `standard`, and `expired`.
          %dt currency
          %dd One of `JPY`, `USD`, `Unknown 2`, and `Unknown 3`.
          %dt date_offset
          %dd
            The hour date changes.
            If this is `6`, the date changes at 6 AM, ie 2012-01-01T05:59:00Z is December 31, 2011 (If the timezone is UTC).
          %dt timezone
          %dd Timezone.
          %dt receipt_title
          %dd Receipt title.
          %dt receipt_footer
          %dd Footer text to be printed on receipt.
          %dt receipt_logo
          %dd Base64 encoded logo image to be printed on receipt.
          %dt menus
          %dd Array of menu ids.
          %dt tables
          %dd Array of tables.
          %dt customer_tags
          %dd Array of customer tags.
          %dt payment_types
          %dd Array of payment types.
          %dt cashiers
          %dd Array of cashiers.
          %dt friends
          %dd Array of parent or child accounts.
    
      .span8
        %h3 Example

        %pre
          = preserve do
            :escaped
              {
                "id": 123,
                "login": "ubiregi-cafe",
                "email": "cafe@ubiregi.com",
                "name": "Ubiregi Cafe",
                "expire_at": "2011-11-13T00:00:00Z",
                "subscription": "standard",
                "currency": "JPY",
                "date_offset": 6,
                "timezone": "Asia/Tokyo",
                "receipt_title": "RECEIPT",
                "receipt_footer": "This is footer to be printed in receipts",
                "receipt_logo": $base64Encoded,
                "menus": [ 8 ],
                "tables": [ $tables ],
                "customer_tags": [ $customer_tags ],
                "payment_types": [ $payment_types ],
                "cashiers": [ $cashiers ],
                "friends": [ $friends ],
              }
      
    %h2 Table

    :markdown
      **Table object is deprecated.**
      It is working now but will be obsoleted soon.

    .row
      .span8
        %h3 Fields

        %dl
          %dt id
          %dd ID of the object.
          %dt name
          %dd Name of the table.
          %dt position
          %dd Position of the table.
      .span8
        %h3 Example

        %pre
          = preserve do
            :escaped
              {
                "id": 123,
                "name": "Table 1",
                "position": 3,
              }

    %h2 Customer Tag

    :markdown
      Tags to give various information on checkouts.
      This can be used to record that *the customer is 20th girl*, *they came for dating*, and so on.

    .row
      .span8
        %h3 Fields

        %dl
          %dt id
          %dd ID of the object.
          %dt name
          %dd Name of the tag.
          %dt position (optional)
          %dd Position of the tag. <code>null</code> in the case the tag is deleted.
          %dt icon
          %dd Icon image for the tag.
          %dt icon_mime
          %dd MIME type of the icon. Usually <code>image/png</code>.
      .span8
        %h3 Example
        
        %pre
          = preserve do
            :escaped
              {
                "id": 123,
                "name": "Dating",
                "potision": null,
                "icon": $base64Encoded,
                "icon_mime": "image/png",
              }

    %h2 PaymentType
    
    :markdown
      How the bill is payed by; cash? or credit card?

    .row
      .span8
        %h3 Fields
        
        %dl
          %dt id
          %dd ID of the object.
          %dt name
          %dd Name of the payment type.
          %dt position (optional)
          %dd
            :markdown
              Position of the type. `null` in the case the payment methods is disabled.
          %dt change
          %dd
            :markdown
              `true` if customers will receive change.
          %dt kind
          %dd
            :markdown
              `CASH` | `CARD` | `OTHER`  
              One `CASH` kind payment type exists all accounts.

      .span8
        %h3 Example
        %pre
          = preserve do
            :escaped
              {
                "id": 111,
                "name": "Credit card",
                "position": 3,
                "change": true,
                "kind": "CARD",
              }

    %h2  Cashier

    :markdown
      Cashier who operated the cash register.
      
    .row
      .span8
        %h3 Fields
        
        %dl
          %dt id
          %dd ID of the object.
          %dt name
          %dd Name of the cashier.
          %dt enabled
          %dd
            :markdown
              `true` if the cashier is enabled. `false` if the cashier is deleted.
          %dt icon
          %dd Base 64 encoded binary data of icon.
          %dt icon_mime
          %dd
            :markdown
              MIME type of the icon. Usually, `image/png` or `image/jpeg`.

      .span8
        %h3 Example
        
        %pre
          = preserve do
            :escaped
              {
                "id": 385,
                "name": "Soutaro Matsumoto",
                "enabled": true,
                "icon": $base64Encoded,
                "icon_mime": "image/png",
              }

    %h2 Friend
    
    :markdown
      Account summary information for chain branches.
      
    .row
      .span8
        %h3 Fields
        
        %dl
          %dt id
          %dd ID of account.
          %dt name
          %dd Name of the account.
      .span8
        %h3 Example

        %pre
          = preserve do
            :escaped
              {
                id: 199,
                name: "hogehoge",
              }

    %h2 Menu Item
    
    :markdown
      Item in menus, which represents one product/service you sell.

    .row
      .span8
        %h3 Fields
        
        %dl
          %dt id
          %dd ID of the object.
          %dt sku
          %dd SKU of the item.
          %dt name
          %dd Name of the item.
          %dt price
          %dd Price of the item. Note that price is a string to avoid inacculate compuation using floats.
          %dt price_type
          %dd
            :markdown
              Note on price. One of `intax`, `outtax`, `percent`, and `nosales`.
              `intax` is used for normal items, such that the VAT is included in the price.
              `outtax` is to mark that the VAT is not included in the price.
              `percent` is for discounting/premiums.
              If "20" is the price of the item and the price_type is `percent`, The price is *20% of premiour*.
              `nosales` is mark that the total sales with this item is not included in sales.
          %dt vat
          %dd
            :markdown
              Percentage of VAT. Present if `price_type` is `intax` or `outtax`.
          %dt position
          %dd
            :markdown
              Position of the item in its category. `null` if the item is disabled.
          %dt category_id
          %dd
            :markdown
              The category the item is belonging to. `null` if the item is disabled.

      .span8
        %h3 Example
        
        %pre
          = preserve do
            :escaped
              {
                "id": 271,
                "sku": "sku",
                "name": "Coke",
                "price": "105",
                "price_type": intax,
                "vat": 5,
                "position": 102,
                "category_id": 105,
              }

    %h2 Category
    
    :markdown
      Categories are used to organize items in a menu. Categories can not be nested.

    .row
      .span8
        %h3 Fields

        %dl
          %dt id
          %dd ID of the object.
          %dt name
          %dd Name of the category.
          %dt position
          %dd
            :markdown
              Position of the category in menu. `null` if the category is disabled.
      .span8
        %h3 Example
        %pre
          = preserve do
            :escaped
              {
                "id": 18,
                "name": "Soft Drink",
                "position": 4,
              }
        
    %h2 Checkout
    
    .row
      .span8
        %h3 Fields
        
        %dl
          %dt id
          %dd ID of the object
          %dt guid
          %dd
            UUID of checkout.
            The ID is generated by clients, thus it may not be unique.
            This is used to prevent a checkout posted from being inserted more than one time.
            The pair of <code>guid</code> and <code>paid_at</code> is used to identify a checkout.
          %dt account_id
          %dd ID of account which the checkout is belonging to.
          %dt price
          %dd Server culculated total sales of the checkout.
          %dt change
          %dd Change given to the customer.
          %dt deleted
          %dd <code>true</code> if the checkout is canceled by user, or <code>false</code> in other case.
          %dt cashier_id
          %dd ID of the cashier who processed the checkout. May be <code>null</code> if input skipped.
          %dt customers_count
          %dd
            Number of customers associated with the checkout.
            Zero in the case ommited.
          %dt payments
          %dd Array of CheckoutPayment, which describes how the checkout is got paid.
          %dt items
          %dd Array of CheckoutItem, which describes which items are sold.
          %dt table_ids
          %dd Array of ID of Table.
          %dt customer_tag_ids
          %dd Array of ID of CustomerTags.
          %dt modifier (obsolete)
          %dd Only for compatibility.

      .span8
        %h3 Example
        
        %pre
          = preserve do
            :escaped
              {
                "id": 1,
                "guid": $UUID-like-sequence,
                "account_id": 1,
                "paid_at": "2011-12-24T16:20:20Z",
                "price": "385.0",
                "change": "4000.0",
                "deleted": true,
                "cashier_id": null,
                "customers_count": 0,
                "payments": [ $Payments ],
                "items": [ $CheckoutItems ],
                "table_ids": [ $TableIDs ],
                "customer_tag_ids": [ $CustomerTagIDs ],
                "modifier": "0.0"
              }

    %h3 Notes
          
    %p
      Fields which represents currency is represented as a string in JSON.
      This is to avoid inacculate float representation.
      Decimal types; like NSDecimalNumber (Objective-C) and BigDecimal(Ruby and Java); should be used for currency.
      
    %p
      Change is assumed to be by cash.

    %h2 Payment
    
    %p
      Pair of amount the customer paid, and method the payment maid with.
    
    .row
      .span8
        %h3 Fields
        
        %dl
          %dt id
          %dd ID of the object
          %dt payment_type_id
          %dd ID of payment_type
          %dt amount
          %dd Amount the customer paid

      .span8
        %h3 Example
        
        %pre
          = preserve do
            :escaped
              {
                "id": 1,
                "payment_type_id": 1,
                "amount": "5000.0"
              }

    %h2 CheckoutItem

    %p
      
    .row
      .span8
        %h3 Fields
        
        %dl
          %dt id
          %dd ID of the object
          %dt menu_item_id
          %dd ID of the menu item
          %dt count
          %dd 
            The number of the items the customer bought.
            May be negative to express a return.
          %dt sales
          %dd Sales amount without TAX.
          %dt tax
          %dd TAX for the item.
          %dt discount_sales
          %dd Sales discounted
          %dt discount_tax
          %dd TAX discounted

      .span8
        %h3 Example
        
        %pre
          = preserve do
            :escaped
              {
                "id": 1,
                "menu_item_id": 1,
                "count": 3,
                "sales": "330.0",
                "tax": "0.0",
                "discount_sales": "0.0",
                "discount_tax": "0.0"
              }

    %h3 Notes
    
    :markdown
      The price is culculated as follows: `sales` + `tax` - (`discount_sales` + `discount_tax`).

  .tab-pane#resources
    %h2 /account

    %p
      The user's account. Readonly.

    %h3 GET /account

    :markdown
      Download the information of current account.
    
    .row
      .span8
        %pre
          = preserve do
            :escaped
              {
                "account": $account,
                "timestamp": "2011-11-02T09:11:34Z",
              }
      .span8
        %dl
          %dt account
          %dd The account.
          %dt timestamp
          %dd The time in ubiregi.com server.

    %h3 Note

    :markdown
      Accesses to `/account` do not expire.
      Even if your account is expired, it returns your account's information.
      However menus, stocks, tables, customer_tags, and cashiers will be empty in that case.

    %h2 /cashiers
    
    :markdown
      Collection of cashiers defined in the user's account.

    %h3 GET on /cashiers
    %h3 POST on /cashiers

    %h2 /customer_tags
    
    :markdown
      Collection of customer tags defined in the account.

    %h3 GET on /customer_tags
    %h3 POST on /customer_tags

    %h2 /payment_types

    :markdown
      Collection of payment methods defined in the account.

    %h3 GET on /payment_types
    %h3 POST on /payment_types
    
    %h2 /tables
    
    :markdown
      Collection of tables defined in the account.

      Tables objects are to be obsolete, and there are no update operations for `/tables`.

    %h3 GET on /tables for indexing

    %h2 /menus/:id/items
    
    :markdown
      Collection of items in menu specified by `:id`.

    %h3 GET on /menus/:id/items
    %h3 POST on /menus/:id/items

    %h2 /menus/:id/categories
    
    :markdown
      Collection of categories in menu specified by `id`.

    %h3 GET on /menus/:id/categories
    %h3 POST on /menus/:id/categories
    %h3 POST on /menus/categories/:id/delete (for deletion)

    %h2 /checkouts
    
    :markdown
      Collection of checkouts of the account.

    %h3 GET on /checkouts
    %h3 POST on /checkouts
    %h3 GET on /checkouts/:id (for fetching other account's checkout)

    %h2 /customers

    :markdown
      Collection of customers available for the account.

    %h3 GET on /customers
    %h3 POST on /customers
    
    %h2 /customers/notes
    
    :markdown
      Collection of customer notes associated with `/customers`.

    %h3 GET on /customers/notes
    %h3 POST on /customers/:id/notes

    %h2 /stocks/events

    :markdown
      Collection of stocking events of the account.

    %h3 GET on /stocks/events
    %h3 POST on /stocks/events

:javascript
  $('.tabs').tabs()